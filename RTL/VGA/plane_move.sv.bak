// (c) Technion IIT, Department of Electrical Engineering 2023 
//-- Alex Grinshpun Apr 2017
//-- Dudy Nov 13 2017
// SystemVerilog version Alex Grinshpun May 2018
// coding convention dudy December 2018
// updated Eyal Lev April 2023
// updated to state machine Dudy March 2023 
// update the hit and collision algoritm - Eyal Jan 2024

module	plane_move	(	
 
					input	 logic clk,
					input	 logic resetN,
					input	 logic startOfFrame,      //short pulse every start of frame 30Hz 
					// input	 logic enable_sof,    // if want to stop the smiley move
					input  logic speedDown, 		 //decrease the speed (key 2)
					input  logic speedUp,      		//increase the speed  (key 8)
					input  logic [3:0] HitEdgeCode, //one bit per edge
					input  logic collision,         //collision if plane hits an object

					output logic signed 	[10:0] topLeftX, // output the top left corner 
					output logic signed	    [10:0] topLeftY  // can be negative , if the object is partliy outside 
					
);


// a module used to generate the  ball trajectory.  

parameter int INITIAL_X = 280;
parameter int INITIAL_Y = 185;
parameter int INITIAL_X_SPEED = 2;

const int   MAX_X_SPEED = 100;
const int	FIXED_POINT_MULTIPLIER = 64; // note it must be 2^n 
// FIXED_POINT_MULTIPLIER is used to enable working with integers in high resolution so that 
// we do all calculations with topLeftX_FixedPoint to get a resolution of 1/64 pixel in calcuatuions,
// we devide at the end by FIXED_POINT_MULTIPLIER which must be 2^n, to return to the initial proportions


// movement limits 
const int   OBJECT_WIDTH_X = 64;
const int   OBJECT_HIGHT_Y = 64;
const int	SafetyMargin   =	2;

const int	x_FRAME_LEFT	=	(SafetyMargin)* FIXED_POINT_MULTIPLIER; 
const int	x_FRAME_RIGHT	=	(639 - SafetyMargin - OBJECT_WIDTH_X)* FIXED_POINT_MULTIPLIER; 
const int	y_FRAME_TOP		=	(SafetyMargin) * FIXED_POINT_MULTIPLIER;
const int	y_FRAME_BOTTOM	=	(479 -SafetyMargin - OBJECT_HIGHT_Y ) * FIXED_POINT_MULTIPLIER; //- OBJECT_HIGHT_Y


enum  logic [2:0] {      IDLE_ST,         	     // initial state
						 MOVE_ST, 			    // moving no colision 
						 START_OF_FRAME_ST,    // startOfFrame activity-after all data collected 
						 POSITION_CHANGE_ST,  // position interpolate 
						 POSITION_LIMITS_ST  // check if inside the frame  
						}  SM_Motion ;

int Xspeed  ; // speed    
int Xposition ; //position   
int Yposition = INITIAL_Y*FIXED_POINT_MULTIPLIER; 


logic toggle_x_key_D ;
 

logic [15:0] hit_reg = 16'b00000;  // register to collect all the collisions in the frame. |corner|left|top|right|bottom|

 //---------
 
always_ff @(posedge clk or negedge resetN)
begin : fsm_sync_proc

	if ( !resetN ) begin 
		SM_Motion <= IDLE_ST ; 
		Xspeed <= 0   ; 
		Xposition <= 0  ; 
		toggle_x_key_D <= 0 ;
		hit_reg <= 16'b0 ;	
	
	end 	
	
	else begin
	
		toggle_x_key_D <= Xspeed ;  //shift register to detect edge 

	
		case(SM_Motion)
		
		//------------
			IDLE_ST: begin
		//------------
		
				Xspeed  <= INITIAL_X_SPEED ; 
				Xposition <= INITIAL_X * FIXED_POINT_MULTIPLIER ;

				if (startOfFrame) 
					SM_Motion <= MOVE_ST ;	
			end
		//------------
			MOVE_ST: begin
		//------------
				if (speedDown && Xspeed >= 1) 
					Xspeed <= Xspeed - 1 ; 
				else if (speedUp && speedUp <= MAX_X_SPEED) 
					Xspeed <= Xspeed + 1 ; 
				else 
					Xspeed <= Xspeed ; 

				if (collision)
				hit_reg[HitEdgeCode] <= 1'b1;

				 if (startOfFrame) 
					SM_Motion <= START_OF_FRAME_ST ; 
			end
				
		//------------
			START_OF_FRAME_ST: begin
		//------------
			case (hit_reg)
				
				16'h0000:  // no collision in the frame 
					begin
							Yspeed <= Yspeed ;
							Xspeed <= Xspeed ;
					end
				16'h0004,16'h0044,16'h000C, 16'h0048 , 16'h004C: // right side 
				 	begin
								Xposition <= x_FRAME_LEFT ;
			  		end
			end
			SM_Motion <= POSITION_CHANGE_ST ;
		
		//------------
			POSITION_CHANGE_ST: begin
		//------------
			Xposition <= Xposition + Xspeed ; 
			SM_Motion <= POSITION_LIMITS_ST ; 
		end

		//------------------------
			POSITION_LIMITS_ST : begin  //check if still inside the frame 
		//------------------------
		if (Xposition > x_FRAME_RIGHT) 
            Xposition <= x_FRAME_LEFT ; 

			SM_Motion <= MOVE_ST ; 
			
			end
		
		endcase  // case 

		
	end 

end // end fsm_sync


//return from FIXED point  trunc back to prame size parameters 
  
assign 	topLeftX = Xposition / FIXED_POINT_MULTIPLIER ;   // note it must be 2^n 
assign 	topLeftY = Yposition / FIXED_POINT_MULTIPLIER ;    
	

endmodule	
//---------------
 
