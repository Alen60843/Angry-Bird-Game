// (c) Technion IIT, Department of Electrical Engineering 2023 
//-- Alex Grinshpun Apr 2017
//-- Dudy Nov 13 2017
// SystemVerilog version Alex Grinshpun May 2018
// coding convention dudy December 2018
// updated Eyal Lev April 2023
// updated to state machine Dudy March 2023 
// update the hit and collision algoritm - Eyal Jan 2024

module	bird_move	(	
 
					input	 logic clk,
					input	 logic resetN,
					input	 logic startOfFrame,     	 //short pulse every start of frame 30Hz 
					// input	 logic enable_sof,    	// if want to stop the smiley move
					
					input  logic initialX_speed,
					input  logic initial_X,
					input	 logic initial_Y,
					input  logic fire_the_bird,
					
					output logic signed 		 [10:0] topLeftX, // output the top left corner 
					output logic signed	    [10:0] topLeftY  // can be negative , if the object is partliy outside 
					
					
);


// a module used to generate the  ball trajectory.  

parameter int INITIAL_X = 128;
parameter int INITIAL_Y = 185;
parameter int INITIAL_X_SPEED = 20;
parameter int INITIAL_Y_SPEED = 0;
parameter int Y_ACCEL = 10;



const int   MAX_Y_SPEED = 200;
const int	FIXED_POINT_MULTIPLIER = 64; // note it must be 2^n 
// FIXED_POINT_MULTIPLIER is used to enable working with integers in high resolution so that 
// we do all calculations with topLeftX_FixedPoint to get a resolution of 1/64 pixel in calcuatuions,
// we devide at the end by FIXED_POINT_MULTIPLIER which must be 2^n, to return to the initial proportions


// movement limits 
const int   OBJECT_WIDTH_X = 128;
const int   OBJECT_HIGHT_Y = 64;//WAS 128
const int	SafetyMargin   =	2;

const int	x_FRAME_LEFT	=	(SafetyMargin)* FIXED_POINT_MULTIPLIER; 
const int	x_FRAME_RIGHT	=	(639 - SafetyMargin - OBJECT_WIDTH_X)* FIXED_POINT_MULTIPLIER; 
const int	y_FRAME_TOP		=	(SafetyMargin) * FIXED_POINT_MULTIPLIER;
const int	y_FRAME_BOTTOM	=	(479 -SafetyMargin - OBJECT_HIGHT_Y ) * FIXED_POINT_MULTIPLIER; //- OBJECT_HIGHT_Y
const int   SPEED_INCREMENT = (5 * FIXED_POINT_MULTIPLIER) / 200;
const int	Yposition_INCREMENT = (5 * FIXED_POINT_MULTIPLIER) / 200;

enum  logic [2:0] {IDLE_ST,         	     // initial state
						 MOVE_ST,			    // moving no colision 
						 START_OF_FRAME_ST    // startOfFrame activity-after all data collected 
						 //POSITION_CHANGE_ST,  // position interpolate 
						 //POSITION_LIMITS_ST  // check if inside the frame  
						}  SM_Motion ;

int Xspeed  ; // speed    
int Yspeed  ; 
int Xposition ; //position   
int Yposition ;  

 

logic [15:0] hit_reg = 16'b00000;  // register to collect all the collisions in the frame. |corner|left|top|right|bottom|

 //---------
 
always_ff @(posedge clk or negedge resetN)
begin : fsm_sync_proc

	if ( !resetN ) begin 
	
		//SM_Motion <= IDLE_ST ;
		//Xspeed <= INITIAL_X_SPEED   ;
		//Yposition <= y_FRAME_TOP;
		//Xposition <= (OBJECT_WIDTH_X * FIXED_POINT_MULTIPLIER)/100 ; 
		
		SM_Motion <= IDLE_ST ; 
		Xspeed <= 0   ; 
		Yspeed <= 0  ; 
		Xposition <= 0  ; 
		Yposition <= 0   ; 
		
	end 	
	
	
	else begin
	

	
		case(SM_Motion)
		
		//------------
			IDLE_ST: begin
		//------------
				Xspeed  <= initialX_speed ; 
				Yspeed  <= INITIAL_Y_SPEED  ; 
				Xposition <= initial_X * FIXED_POINT_MULTIPLIER;
				Yposition <= initial_Y  *FIXED_POINT_MULTIPLIER; 
				
				if (startOfFrame && fire_the_bird) 
					SM_Motion <= MOVE_ST ;
					
			end
			
		//------------
			MOVE_ST: begin
		//------------
				if ( Yspeed <  MAX_Y_SPEED)//  while moving down
					Yspeed <= Yspeed + Y_ACCEL;//+1 ; 
				

				if (startOfFrame )
					SM_Motion <= START_OF_FRAME_ST ;  
			end
				
		//------------
			START_OF_FRAME_ST: begin
		//------------
				Xposition <= Xposition + Xspeed ;	
				Yposition <= Yposition - Yspeed ;
				
			if (Xposition < x_FRAME_LEFT) 
						Xposition <= x_FRAME_LEFT ; 
						
			if (Xposition > x_FRAME_RIGHT)		
						Xposition <= x_FRAME_LEFT ;
						
			if (Yposition < y_FRAME_TOP) 
						Yposition <= y_FRAME_TOP ; 
						
			if (Yposition > y_FRAME_BOTTOM) 
						Yposition <= y_FRAME_BOTTOM ; 
			
			
			SM_Motion <= MOVE_ST ;
	
			end
			
		
		
	endcase  // case 

		
	end 

end // end fsm_sync


//return from FIXED point  trunc back to prame size parameters 
  
assign 	topLeftX = Xposition / FIXED_POINT_MULTIPLIER ;   // note it must be 2^n 
assign 	topLeftY = Yposition / FIXED_POINT_MULTIPLIER ;   	

endmodule	
//---------------
 
