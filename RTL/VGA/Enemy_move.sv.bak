// (c) Technion IIT, Department of Electrical Engineering 2023 
//-- Alex Grinshpun Apr 2017
//-- Dudy Nov 13 2017
// SystemVerilog version Alex Grinshpun May 2018
// coding convention dudy December 2018
// updated Eyal Lev April 2023
// updated to state machine Dudy March 2023 
// update the hit and collision algoritm - Eyal Jan 2024

module	Enemy_move	(	
 
					input	 logic clk,
					input	 logic resetN,
					input	 logic startOfFrame,      //short pulse every start of frame 30Hz  		
					input  logic collision,         //collision if fire hits an object
					input  logic [10:0] MonsterTopLeftX,  // x position of monsters
					input  logic [10:0] MonsterTopLeftY,  // Y position of monsters
					input  logic [4:0] random_X,  // random x position
					input  logic [4:0] random_Y,  // random y position
					input  logic timer,
					input	 logic fire,      //the approval to fire

					output logic signed 	[10:0] topLeftX, // output the top left corner 
					output logic signed	[10:0] topLeftY,  // can be negative , if the object is partliy outside 
					output logic shooting
					
					
);



  
parameter int INITIAL_X=85;
parameter int INITIAL_Y=41;
parameter int Correction_X=80;
parameter int Correction_Y=40;

parameter int INITIAL_Y_SPEED = 150;

const int	FIXED_POINT_MULTIPLIER = 64; // note it must be 2^n 
// FIXED_POINT_MULTIPLIER is used to enable working with integers in high resolution so that 
// we do all calculations with topLeftX_FixedPoint to get a resolution of 1/64 pixel in calcuatuions,
// we devide at the end by FIXED_POINT_MULTIPLIER which must be 2^n, to return to the initial proportions


// movement limits 
const int   OBJECT_WIDTH_X = 16;
const int   OBJECT_HIGHT_Y = 32;
const int	SafetyMargin   =	1;

const int	x_FRAME_LEFT	=	(SafetyMargin)* FIXED_POINT_MULTIPLIER; 
const int	x_FRAME_RIGHT	=	(639 - SafetyMargin - OBJECT_WIDTH_X)* FIXED_POINT_MULTIPLIER; 
const int	y_FRAME_TOP		=	(SafetyMargin) * FIXED_POINT_MULTIPLIER;
const int	y_FRAME_BOTTOM	=	(479 -SafetyMargin - OBJECT_HIGHT_Y ) * FIXED_POINT_MULTIPLIER; //- OBJECT_HIGHT_Y


enum  logic [2:0] {IDLE_ST,         	// initial state
						 MOVE_ST, 				// moving no colision 
						 WAIT_ST,
						 POSITION_CHANGE_ST, // position interpolate 
						 POSITION_LIMITS_ST  // check if inside the frame  
						}  SM_Motion ;

int Yspeed  ; // speed     
int Xposition ; //position   
int Yposition ;  
 

 //---------
 
always_ff @(posedge clk or negedge resetN)
begin : fsm_sync_proc

	if (resetN == 1'b0) begin 
		SM_Motion <= IDLE_ST ; 
		Yspeed <= 0   ;   

   	Xposition <= INITIAL_X*FIXED_POINT_MULTIPLIER; 
		Yposition <= INITIAL_Y*FIXED_POINT_MULTIPLIER; 

	   shooting	<= 0 ;
	
	end 	
	
	else begin
	
		case(SM_Motion)
		
		//------------
			IDLE_ST: begin
		//------------
		      
				Yspeed  <= INITIAL_Y_SPEED ; 

   			Xposition <= (MonsterTopLeftX+Correction_X+OBJECT_HIGHT_Y*random_X)*FIXED_POINT_MULTIPLIER; 
				Yposition <= (MonsterTopLeftY+Correction_Y+OBJECT_HIGHT_Y*random_Y)*FIXED_POINT_MULTIPLIER; 

				if (timer && fire) begin 			
               SM_Motion <= MOVE_ST ;
					shooting <= 1 ;
				end
			end
	
		//------------
			MOVE_ST:  begin     // moving no colision 
		//------------
	
       // collcting collisions 	
				if (collision) begin
					SM_Motion <= IDLE_ST ;
					shooting <= 0;
				end
				

				if (startOfFrame) begin
				        	SM_Motion <= WAIT_ST ; 
				end	
				
		end 
		
		//------------
			WAIT_ST:  begin     // waiting for next clk 
		//------------
	
       	SM_Motion <= POSITION_CHANGE_ST ;
				
		end		
		

		//------------------------
			POSITION_CHANGE_ST : begin  // position interpolate 
		//------------------------
			   Yposition <= Yposition + Yspeed ; 					
					
				SM_Motion <= POSITION_LIMITS_ST ; 
			end
		
		//------------------------
			POSITION_LIMITS_ST : begin  //check if still inside the frame 
		//------------------------
		if (Xposition < x_FRAME_LEFT) 
						Xposition <= x_FRAME_LEFT ; 
   	else if (Xposition > x_FRAME_RIGHT)
                  Xposition <= (MonsterTopLeftY+Correction_Y+OBJECT_HIGHT_Y*random_Y)*FIXED_POINT_MULTIPLIER;  
	   else if (Yposition > y_FRAME_BOTTOM) begin

   			Xposition <= (MonsterTopLeftX+Correction_X+OBJECT_HIGHT_Y*random_X)*FIXED_POINT_MULTIPLIER; 
				Yposition <= (MonsterTopLeftY+Correction_Y+OBJECT_HIGHT_Y*random_Y)*FIXED_POINT_MULTIPLIER;
				
						SM_Motion <= IDLE_ST;
						shooting <= 0;
				    end		

		   else
				SM_Motion <= MOVE_ST ; 
			end
		
		endcase  // case 

		
	end 

end // end fsm_sync


//return from FIXED point  trunc back to prame size parameters 
  
assign 	topLeftX = Xposition / FIXED_POINT_MULTIPLIER ;   // note it must be 2^n 
assign 	topLeftY = Yposition / FIXED_POINT_MULTIPLIER ;    
	

endmodule	
//---------------
 
